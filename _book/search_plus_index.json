{"./":{"url":"./","title":"Python简介","keywords":"","body":"Python的定义 Python 是一种简单易学并且结合了 解释性、编译性、互动性和面向对象的脚本语言。 Python提供了高级数据结构，它的语法和动态类型以及解释性使它成为广大开发者的首选编程语言。 Python 是解释型语言： 开发过程中没有了编译这个环节。类似于PHP和Perl语言。 Python 是交互式语言： 可以在一个 Python 提示符 >>> 后直接执行代码。 Python 是面向对象语言: Python支持面向对象的风格或代码封装在对象的编程技术。 Python发展历史： https://baike.baidu.com/item/Python/407313?fr=aladdin Python的版本 目前python发布的版本过程主要包括如下： 发布版本 年份 GPL 兼容 0.9.0 至 1.2 1991-1995 是 1.3 至 1.5.2 1995-1999 是 1.6 2000 否 2.0 2000 否 1.6.1 2001 否 2.1 2001 否 2.0.1 2001 是 2.1.1 2001 是 2.1.2 2002 是 2.1.3 2002 是 2.2 及更高 2001至今 是 ... ... ... 3.10.4 2022 是 Python2和Python3两个版本各有优缺，Python2由于是比较早的版本，因此资料相对多;而Python3是以后的发展趋势，一般企业久而久之都会转成使用P3。根据自己的实际情况选择，虽然是两个版本，但差异也不大，通常一个学会以后另一个版本花些时间就可以。 本次学习使用的版本：3.7.2 Python的应用 Python的应用主要有以下领域： Linux/UNIX运维：提供API（Application Programming Interface应用程序编程接口），能方便进行系统维护和管理。 GUI程序开发（PyQt、Kivy等） Web程序开发（Django、Flask等框架）：支持最新的XML技术。 移动App开发（PyQt、Kivy等）：Python的PyOpenGL模块封装了“OpenGL应用程序编程接口”，能进行二维和三维图像处理。PyGame模块可用于编写游戏软件。 网络爬虫（为搜索引擎、深度学习等领域提供数据源） 网络编程（基于Socket等协议）：提供丰富的模块支持sockets编程，能方便快速地开发分布式应用程序。很多大规模软件开发计划例如Zope，Mnet 及BitTorrent. Google都在广泛地使用它。 图形处理：有PIL、Tkinter等图形库支持，能方便进行图形处理。 文本处理：python提供的re模块能支持正则表达式，还提供SGML，XML分析模块，许多程序员利用python进行XML程序的开发。 数据库编程：可通过遵循Python DB-API（数据库应用程序编程接口）规范的模块与Microsoft SQL Server，Oracle，Sybase，DB2，Mysql、SQLite等数据库通信。python自带有一个Gadfly模块，提供了一个完整的SQL环境。 数据科学：NumPy扩展提供大量与许多标准数学库的接口。机器学习（scikit-learn、TensorFlow框架）、数据统计分析和可视化（Matplotlib、seaborn框架）。 Python的特点 简单易读易学：Python是非常简单的语言，并且具有清晰的风格和强制缩进，Python具有简单的语法，极其容易入门。 免费、开源：Python是自由/开放源码的软件。可以自行对其源代码进行修改使用。 可移植性：Python可以被移植在许多平台上，常用的平台包括Linux、Windows、VxWorks、PlayStation、Windows CE、PocketPC等。 解释性： Python解释器把源代码转换成字节码，然后再把它翻译成计算机使用的机器语言并运行，即Python代码在运行之前不需要编译。 面向对象：Python支持面向对象的编程。程序通过组合（composition）与继承（inheritance）的方式定义类（class）。 可扩展性：如果需要一段关键代码运行得更快或者希望某些算法不公开，那么可以将部分程序用C或C++进行编写，然后在Python程序中调用。 可嵌入性：可以把Python嵌入C/C++程序，从而向程序用户提供脚本功能。 交互式命令行：python可以单步直译运行，可以在一个 Python 提示符 >>> 后直接执行代码。 丰富的标准库：Python标准库包括字符串处理（字典、数组切片、正则表达式re）、文档生成、多线程、串行化、数据库、HTML/XML解析（BeautifulSoup，Expat）、单元测试（PyUnit）、代码版本控制（PySVN）、WAV文件、网络控制（urllib2）、密码系统、GUI（图形用户界面，PyQt）、图形模块（Tkinter、PyTCL、WxPython）等。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。 规范性：采用强制缩进的方式使得代码具有较好可读性，减少了视觉上的错乱。 胶水语言：python经常用作将不同语言编写的程序“粘”在一起的胶水语言。Boost.Python使得Python和C++的类库可互相调用（.pyc）；Jpython是用Java实现的Python，可以同时使用两者的类库；Ironpython是Python在.NET平台上的版本。 Python优点 易于学习，非常适合初学者，也特别适合专家使用 可伸缩程度高，适于大型项目或小型的一次性程序(称为脚本) 可移植，跨平台 可嵌入(使 ArcGIS 可脚本化) 稳定成熟 用户社区规模大 Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-08-31 12:08:27 "},"md/准备.html":{"url":"md/准备.html","title":"0.准备","keywords":"","body":"Python解释器 Python解释器作用：运行文件 Python解释器的种类： CPython，C语言开发的解释器[官方]，应用广泛的解释器。 IPython，基于CPython的一种交互式解释器。 其他解释器 PyPy，基于Python语言开发的解释器。 Jython，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。 IronPython，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译 成.Net的字节码。 本次学习使用的解释器：CPython 下载Python解释器 下载地址：https://www.python.org/downloads/release/python-372/ [单击上述链接] -- 查找目标文件：Windows x86-64 executable installer -- 单击即可下载 安装Python解释器 双击可执行文件 — 勾选[pip] -- [Next] -- [勾选添加环境变量] -- [Install]，按提示操作即可 PyCharm PyCharm是一种Python IDE（集成开发环境），带有一整套可以帮助用户在使用Python语言开发时 提高其效率的工具，内部集成的功能如下： 项目管理 智能提示 语法高亮 代码跳转 调试代码 解释代码(解释器) 框架和库 ...... PythonCharm分为专业版（professional）和社区版（community） 区别：https://pcedu.pconline.com.cn/1504/15048148.html 下载PyCharm 下载地址：https://www.jetbrains.com/pycharm/download/other.html 注意：这里选择Community(社区版)下载，专业版是收费版本，社区版可以满足我们基础编程需求 安装PyCharm 双击安装包 -- [运行] -- [Next] -- [选择安装位置] -- [Next] -- [Install] -[Finish] 新建项目 打开PyCharm -- [Create New Project] -- 选择项目根目录和解释器版本 -- [Create]，即可完成新建一 个项目 新建文件并书写代码 项目根目录或根目录内部任意位置 — 右键 -- [New] -- [Python File] -- 输入文件名 -- [OK] 如果是将来要上传到服务器的文件，那么文件名切记不能用中文 双击打开文件，并书写一个最简单的Python代码： print(\"hello world\") 运行文件 文件打开状态 -- 空白位置 — 右键 -- Run -- 即可调出Pycharm的控制台输出程序结果 控制台输出结果： Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-09-01 02:05:56 "},"md/注释.html":{"url":"md/注释.html","title":"1.注释","keywords":"","body":"注释的作用 通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性。 注释只是为了提高可读性，不会被计算机编译 注释的分类和语法 注释分为两类：单行注释和多行注释 单行注释 只能注释一行内容，语法如下： # 注释内容 多行注释 可以注释多行内容，一般用在注释一段代码的情况，语法如下： ''' 注释内容1 注释内容2 注释内容3 ''' \"\"\" 注释内容1 注释内容2 注释内容3 \"\"\" 快捷键：ctrl+/ 代码演示： 单行注释 # 输出hello world print('hello world') print('hello Python') # 输出(简单的说明可以放到⼀⾏代码的后⾯，⼀般习惯代码后⾯添加两个空格再书写注释文字) 多行注释 \"\"\" 下⾯三⾏都是输出的作⽤，输出内容分别是： hello Python hello world hello Java \"\"\" print('hello Python') print('hello world') print('hello Java') ''' 下⾯三⾏都是输出的作⽤，输出内容分别是： hello Python hello world hello Java ''' print('hello Python') print('hello world') print('hello Java') 注意：解释器不执行任何的注释内容 Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-09-01 02:06:14 "},"md/变量.html":{"url":"md/变量.html","title":"2.变量","keywords":"","body":"变量的含义 程序中，数据都是临时存储在内存中的，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。 变量就是一个存储数据的时候当前数据所在的内存地址的名字而已 变量的作用 在查找数据的时候，我们找到这个变量名字就相当于找到了内存地址，找到内存也就是找到内存所存储的数据，这样就是找到了这个数据，后期我们就可以对这个数据进行各种处理。 定义变量 变量名 = 值 变量名自定义，要满足标识符命名规则 标识符 标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下： 由数字、字母、下划线组成 不能数字开头 严格区分大小写 不能使用内置关键字 内置关键字如下： False None True and as assert break class continue def del elif else except finally for yield from global if import in is lambda nonlocal not or pass raise return try while with 命名习惯 见名知意 大驼峰：即每个单词首字母都大写，例如：MyName 小驼峰：第二个（含）以后的单词首字母大写，例如：myName 下划线：例如：my_name 使用变量 定义一个变量并输出： myName = 'KunCheng' print(myName) 控制台输出结果： 注意：当使用一个不存在的变量时程序会出错，你可以将第二行的myName改为其他名称，然后运行看看程序会输出什么 认识数据类型 在Python里为了应对不同的业务需求，也把数据分为不同的类型。 检测数据类型的方法：type() 代码演示： a = 1 print(type(a)) # --整型 b = 1.1 print(type(b)) # --浮点型 c = True print(type(c)) # --布尔型 d = '1234' print(type(d)) # --字符串 e = [10, 20, 30] print(type(e)) # --列表 f = (10, 20, 30) print(type(f)) # --元组 g = {10, 20, 30} print(type(g)) # --集合 h = {'name': 'Kuncheng', 'age': 20} print(type(h)) # --字典 控制台输出结果： Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-09-01 02:05:46 "},"md/输出&输入.html":{"url":"md/输出&输入.html","title":"3.输出&输入","keywords":"","body":"3.输出&输入 Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-08-31 12:05:46 "},"md/数据类型转换.html":{"url":"md/数据类型转换.html","title":"4.数据类型转换","keywords":"","body":"4.数据类型转换 Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-08-31 12:05:46 "},"md/运算符.html":{"url":"md/运算符.html","title":"5.运算符","keywords":"","body":"5.运算符 Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-08-31 12:05:46 "},"md/if.html":{"url":"md/if.html","title":"6.if、elif、else","keywords":"","body":"6.if、elif、else Copyright © KunCheng all right reserved，powered by Gitbook更新时间： 2022-08-31 12:27:59 "}}